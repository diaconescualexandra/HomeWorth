// <auto-generated />
using System;
using HomeWorth.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HomeWorth.Server.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250602110951_AddGroundFloorAndLastFloor")]
    partial class AddGroundFloorAndLastFloor
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HomeWorth.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("HomeWorth.Server.Models.Facility", b =>
                {
                    b.Property<int>("facilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("facilityId"));

                    b.Property<string>("facilityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("facilityId");

                    b.ToTable("Facilities");

                    b.HasData(
                        new
                        {
                            facilityId = 1,
                            facilityName = "Swimming Pool"
                        },
                        new
                        {
                            facilityId = 2,
                            facilityName = "Gym"
                        },
                        new
                        {
                            facilityId = 4,
                            facilityName = "Security"
                        },
                        new
                        {
                            facilityId = 5,
                            facilityName = "Elevator"
                        },
                        new
                        {
                            facilityId = 6,
                            facilityName = "Children's Play Area"
                        },
                        new
                        {
                            facilityId = 7,
                            facilityName = "Garden"
                        },
                        new
                        {
                            facilityId = 8,
                            facilityName = "Garage"
                        },
                        new
                        {
                            facilityId = 9,
                            facilityName = "Balcony"
                        },
                        new
                        {
                            facilityId = 10,
                            facilityName = "Air Conditioning"
                        },
                        new
                        {
                            facilityId = 11,
                            facilityName = "Heating"
                        },
                        new
                        {
                            facilityId = 12,
                            facilityName = "Solar Panels"
                        },
                        new
                        {
                            facilityId = 13,
                            facilityName = "Outdoor Seating Area"
                        });
                });

            modelBuilder.Entity("HomeWorth.Server.Models.Favourite", b =>
                {
                    b.Property<int>("favouriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("favouriteId"));

                    b.Property<string>("buyerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("propertyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("favouriteId");

                    b.HasIndex("buyerId");

                    b.HasIndex("propertyId");

                    b.ToTable("Favourites");
                });

            modelBuilder.Entity("HomeWorth.Server.Models.Image", b =>
                {
                    b.Property<Guid>("imageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("imageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isFirst")
                        .HasColumnType("bit");

                    b.Property<Guid>("propertyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("imageId");

                    b.HasIndex("propertyId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("HomeWorth.Server.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("phoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("HomeWorth.Server.Models.Offer", b =>
                {
                    b.Property<int>("offerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("offerId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("buyerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("offeredAmount")
                        .HasColumnType("float");

                    b.Property<Guid>("propertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("IN_PROGRESS");

                    b.HasKey("offerId");

                    b.HasIndex("buyerId");

                    b.HasIndex("propertyId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("HomeWorth.Server.Models.Property", b =>
                {
                    b.Property<Guid>("propertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PropertyType")
                        .HasColumnType("int");

                    b.Property<string>("SellerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("latitude")
                        .HasColumnType("float");

                    b.Property<double?>("longitude")
                        .HasColumnType("float");

                    b.Property<string>("neighborhood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("noOfRooms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<int>("size")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("yearBuilt")
                        .HasColumnType("int");

                    b.HasKey("propertyId");

                    b.HasIndex("SellerId");

                    b.ToTable("Properties");

                    b.HasDiscriminator<int>("PropertyType").HasValue(0);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("HomeWorth.Server.Models.PropertyFacility", b =>
                {
                    b.Property<Guid>("propertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("facilityId")
                        .HasColumnType("int");

                    b.HasKey("propertyId", "facilityId");

                    b.HasIndex("facilityId");

                    b.ToTable("PropertyFacilities");
                });

            modelBuilder.Entity("HomeWorth.Server.Models.PropertyView", b =>
                {
                    b.Property<int>("propertyViewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("propertyViewId"));

                    b.Property<string>("buyerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("propertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("viewedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("viewsCount")
                        .HasColumnType("int");

                    b.HasKey("propertyViewId");

                    b.HasIndex("buyerId");

                    b.HasIndex("propertyId");

                    b.ToTable("PropertyViews");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HomeWorth.Server.Models.Flat", b =>
                {
                    b.HasBaseType("HomeWorth.Server.Models.Property");

                    b.Property<int>("floorNo")
                        .HasColumnType("int");

                    b.Property<int>("totalFloors")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("HomeWorth.Server.Models.House", b =>
                {
                    b.HasBaseType("HomeWorth.Server.Models.Property");

                    b.Property<int>("noOfFloors")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("HomeWorth.Server.Models.Favourite", b =>
                {
                    b.HasOne("HomeWorth.Server.Models.ApplicationUser", "Buyer")
                        .WithMany("Favourites")
                        .HasForeignKey("buyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HomeWorth.Server.Models.Property", "Property")
                        .WithMany("Favourites")
                        .HasForeignKey("propertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("HomeWorth.Server.Models.Image", b =>
                {
                    b.HasOne("HomeWorth.Server.Models.Property", "Property")
                        .WithMany("images")
                        .HasForeignKey("propertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("HomeWorth.Server.Models.Notification", b =>
                {
                    b.HasOne("HomeWorth.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HomeWorth.Server.Models.Offer", b =>
                {
                    b.HasOne("HomeWorth.Server.Models.ApplicationUser", "Buyer")
                        .WithMany("Offers")
                        .HasForeignKey("buyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HomeWorth.Server.Models.Property", "Property")
                        .WithMany("Offers")
                        .HasForeignKey("propertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("HomeWorth.Server.Models.Property", b =>
                {
                    b.HasOne("HomeWorth.Server.Models.ApplicationUser", "Seller")
                        .WithMany("Properties")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("HomeWorth.Server.Models.PropertyFacility", b =>
                {
                    b.HasOne("HomeWorth.Server.Models.Facility", "Facility")
                        .WithMany("PropertyFacilities")
                        .HasForeignKey("facilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeWorth.Server.Models.Property", "Property")
                        .WithMany("PropertyFacilities")
                        .HasForeignKey("propertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("HomeWorth.Server.Models.PropertyView", b =>
                {
                    b.HasOne("HomeWorth.Server.Models.ApplicationUser", "Buyer")
                        .WithMany("PropertyViews")
                        .HasForeignKey("buyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HomeWorth.Server.Models.Property", "Property")
                        .WithMany("PropertyViews")
                        .HasForeignKey("propertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HomeWorth.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HomeWorth.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeWorth.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HomeWorth.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HomeWorth.Server.Models.ApplicationUser", b =>
                {
                    b.Navigation("Favourites");

                    b.Navigation("Offers");

                    b.Navigation("Properties");

                    b.Navigation("PropertyViews");
                });

            modelBuilder.Entity("HomeWorth.Server.Models.Facility", b =>
                {
                    b.Navigation("PropertyFacilities");
                });

            modelBuilder.Entity("HomeWorth.Server.Models.Property", b =>
                {
                    b.Navigation("Favourites");

                    b.Navigation("Offers");

                    b.Navigation("PropertyFacilities");

                    b.Navigation("PropertyViews");

                    b.Navigation("images");
                });
#pragma warning restore 612, 618
        }
    }
}
